// <auto-generated />
using System;
using CocktailDebacle.Server.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CocktailDebacle.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CocktailDebacle.Server.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DbCocktails");
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.RecommenderSystems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DbRecommenderSystems");
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptCookis")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Leanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PersonalizedExperience")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersId");

                    b.ToTable("DbUser");
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DbUsers");
                });

            modelBuilder.Entity("CocktailUser", b =>
                {
                    b.Property<int>("CocktailsLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CocktailsLikeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCocktailsLike", (string)null);
                });

            modelBuilder.Entity("CocktailUser1", b =>
                {
                    b.Property<int>("CocktailsCreateId")
                        .HasColumnType("int");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.HasKey("CocktailsCreateId", "User1Id");

                    b.HasIndex("User1Id");

                    b.ToTable("UserCocktailsCreate", (string)null);
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.RecommenderSystems", b =>
                {
                    b.HasOne("CocktailDebacle.Server.Models.User", null)
                        .WithOne("RecommenderSystems")
                        .HasForeignKey("CocktailDebacle.Server.Models.RecommenderSystems", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.User", b =>
                {
                    b.HasOne("CocktailDebacle.Server.Models.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");

                    b.HasOne("CocktailDebacle.Server.Models.Users", "Users")
                        .WithMany("UserList")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CocktailUser", b =>
                {
                    b.HasOne("CocktailDebacle.Server.Models.Cocktail", null)
                        .WithMany()
                        .HasForeignKey("CocktailsLikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailDebacle.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailUser1", b =>
                {
                    b.HasOne("CocktailDebacle.Server.Models.Cocktail", null)
                        .WithMany()
                        .HasForeignKey("CocktailsCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailDebacle.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("RecommenderSystems");
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.Users", b =>
                {
                    b.Navigation("UserList");
                });
#pragma warning restore 612, 618
        }
    }
}
